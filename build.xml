<?xml version="1.0" encoding="UTF-8"?>
<project name="hola" default="all">
    <property name="hola.version" value="0.1.3"/>

    <property file="build.properties"/>

    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="700m"/>
    <patternset id="ignored.files">
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/*.rbc/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.bundle/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.tox/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.war"/>
        <include name="*.ear"/>
        <include name="*.apk"/>
        <include name="*.zip"/>
        <include name="*.swc"/>
        <include name="*.ane"/>
        <include name="*.egg"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
        <exclude name="**/?*.aj"/>
    </patternset>


    <!-- Project Libraries -->

    <path id="library.logback.classpath">
        <pathelement location="${basedir}/lib/logback-classic-1.1.3.jar"/>
        <pathelement location="${basedir}/lib/logback-core-1.1.3.jar"/>
    </path>

    <path id="library.slf4j-api.classpath">
        <pathelement location="${basedir}/lib/slf4j-api-1.7.12.jar"/>
    </path>

    <path id="library.junit.classpath">
        <pathelement location="${basedir}/lib/junit-4.12.jar"/>
        <pathelement location="${basedir}/lib/hamcrest-core-1.3.jar"/>
    </path>

    <!-- Modules -->


    <!-- Module Hola -->

    <dirname property="module.hola.basedir" file="${ant.file}"/>

    <property name="compiler.args.hola" value="-encoding UTF-8 -source 8 ${compiler.args}"/>

    <property name="hola.output.dir" value="${module.hola.basedir}/out/production/Hola"/>
    <property name="hola.testoutput.dir" value="${module.hola.basedir}/out/test/Hola"/>
    <property name="hola.junit.report.dir" value="${module.hola.basedir}/out/report"/>

    <path id="hola.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="hola.module.production.classpath">
        <path refid="library.slf4j-api.classpath"/>
        <path refid="library.logback.classpath"/>
    </path>

    <path id="hola.runtime.production.module.classpath">
        <pathelement location="${hola.output.dir}"/>
        <path refid="library.slf4j-api.classpath"/>
        <path refid="library.logback.classpath"/>
    </path>

    <path id="hola.module.classpath">
        <pathelement location="${hola.output.dir}"/>
        <path refid="library.slf4j-api.classpath"/>
        <path refid="library.logback.classpath"/>
        <path refid="library.junit.classpath"/>
    </path>

    <path id="hola.runtime.module.classpath">
        <pathelement location="${hola.testoutput.dir}"/>
        <pathelement location="${hola.output.dir}"/>
        <path refid="library.slf4j-api.classpath"/>
        <path refid="library.logback.classpath"/>
        <path refid="library.junit.classpath"/>
    </path>


    <patternset id="excluded.from.module.hola">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.hola">
        <patternset refid="excluded.from.module.hola"/>
    </patternset>

    <path id="hola.module.sourcepath">
        <dirset dir="${module.hola.basedir}">
            <include name="src"/>
        </dirset>
    </path>

    <path id="hola.module.test.sourcepath">
        <dirset dir="${module.hola.basedir}">
            <include name="test"/>
        </dirset>
    </path>


    <target name="compile.module.hola" depends="compile.module.hola.production,compile.module.hola.tests"
            description="Compile module Hola"/>

    <target name="compile.module.hola.production" description="Compile module Hola; production classes">
        <mkdir dir="${hola.output.dir}"/>
        <javac destdir="${hola.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true"
               includeantruntime="false">
            <compilerarg line="${compiler.args.hola}"/>
            <bootclasspath refid="hola.module.bootclasspath"/>
            <classpath refid="hola.module.production.classpath"/>
            <src refid="hola.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.hola"/>
        </javac>

        <copy todir="${hola.output.dir}">
            <fileset dir="${module.hola.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.hola.tests" depends="compile.module.hola.production"
            description="compile module Hola; test classes" unless="skip.tests">
        <mkdir dir="${hola.testoutput.dir}"/>
        <javac destdir="${hola.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true"
               includeantruntime="false">
            <compilerarg line="${compiler.args.hola}"/>
            <bootclasspath refid="hola.module.bootclasspath"/>
            <classpath refid="hola.module.classpath"/>
            <src refid="hola.module.test.sourcepath"/>
            <patternset refid="excluded.from.compilation.hola"/>
        </javac>

        <copy todir="${hola.testoutput.dir}">
            <fileset dir="${module.hola.basedir}/test">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean.module.hola" description="cleanup module">
        <delete dir="${hola.output.dir}"/>
        <delete dir="${hola.testoutput.dir}"/>

    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.module.hola, clean.tests" description="cleanup all"/>

    <target name="build.modules" depends="init, clean, compile.module.hola" description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.hola:jar" value="${basedir}/out/artifacts"/>
        <delete dir="${artifact.output.hola:jar}"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.hola.jar" value="${artifacts.temp.dir}/hola.jar"/>
    </target>

    <target name="artifact.hola:jar" depends="init.artifacts, compile.module.hola"
            description="Build &#39;Hola:jar&#39; artifact">
        <property name="artifact.temp.output.hola:jar" value="${artifacts.temp.dir}/Hola_jar"/>
        <mkdir dir="${artifact.temp.output.hola:jar}"/>
        <jar destfile="${temp.jar.path.hola.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${hola.output.dir}"/>
        </jar>
        <copy file="${temp.jar.path.hola.jar}" tofile="${artifact.temp.output.hola:jar}/hola-${hola.version}.jar"/>
    </target>

    <target name="build.all.artifacts" depends="artifact.hola:jar" description="Build all artifacts">
        <mkdir dir="${artifact.output.hola:jar}"/>
        <copy todir="${artifact.output.hola:jar}">
            <fileset dir="${artifact.temp.output.hola:jar}"/>
        </copy>

        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <target name="test" depends="build.modules">
        <delete dir="${hola.junit.report.dir}"/>
        <mkdir dir="${hola.junit.report.dir}"/>
        <junit showoutput="true" printsummary="yes" fork="yes">
            <formatter type="xml"/>
            <classpath refid="hola.runtime.module.classpath"/>
            <batchtest todir="${hola.junit.report.dir}">
                <fileset dir="${hola.testoutput.dir}">
                    <include name="**/TestSuite.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="clean.tests">
        <delete dir="${hola.junit.report.dir}"/>
    </target>

    <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>